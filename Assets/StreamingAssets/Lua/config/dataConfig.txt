-- 解析Gds用的
dataConfig = {}
dataConfig.configs = {}

dataConfig.currentParseName = "";

function dataConfig.getConfig(name)	
	return dataConfig.configs[name] 
end

function dataConfig.getInstance(name, ...)
	local key = "";
	for i,v in ipairs({...}) do
		if key == "" then
			key = v;
		else
			key = key.."^"..v;
		end
	end

	--print(key);

	local config = dataConfig.getConfig(name);
	if config then
		
		return config[key];
	else
		return nil;
	end
end

function parseCSVLine(s)
  s = s .. ','        -- ending comma
  local t = {}        -- table to collect fields
  local fieldstart = 1
  repeat
    -- next field is quoted? (start with `"'?)
    if string.find(s, '^"', fieldstart) then
      local a, c
      local i  = fieldstart
      repeat
        -- find closing quote
        a, i, c = string.find(s, '"("?)', i+1)
      until c ~= '"'    -- quote not followed by quote?
      if not i then error( dataConfig.currentParseName.." 文件解析错误，注释中的引号不配对!"..string.sub(s, fieldstart)) end
      local f = string.sub(s, fieldstart+1, i-1)
      table.insert(t, (string.gsub(f, '""', '"')))
      fieldstart = string.find(s, ',', i) + 1
    else                -- unquoted; find next comma
      local nexti = string.find(s, ',', fieldstart)
      table.insert(t, string.sub(s, fieldstart, nexti-1))
      fieldstart = nexti + 1
    end
  until fieldstart > string.len(s)
  return t
end

function dataConfig.parseFieldNames(fields, fieldTypes)
	local fieldNames = {};

	for i, fieldType in ipairs(fieldTypes) do
		
		local fieldName = {};

		if fieldType.isStruct then
			
			local names = string.split(fields[i], "|");

			fieldName.structName = names[1];
			fieldName.structFieldNames = {};

			for j=2, #names do
				table.insert(fieldName.structFieldNames, names[j]);
			end
		else

			fieldName = fields[i];
		end

		table.insert(fieldNames, fieldName);
	end

	return fieldNames;
end

function dataConfig.parseFieldTypes(fields)
	local fieldTypes = {};

	for i, field in ipairs(fields) do
		
		local fieldType = {};
		
		local len = string.len(field);
		fieldType.isArray = string.sub(field, -2) == "[]";
		fieldType.isStruct = string.sub(field, 1, 1) == "[" and string.sub(field, -1, -1) == "]";

		if fieldType.isStruct then
			
			local pos = string.find(field, "]");

			local structType = string.sub(field, 2, pos-1);

			local types = string.split(structType, "|");

			fieldType.dataType = types;

		else

			local pos = string.find(field, "%[");
			
			if pos then
				
				fieldType.dataType = string.sub(field, 1, pos-1);

			else
				
				fieldType.dataType = field;

			end

		end

		table.insert(fieldTypes, fieldType);

	end

	return fieldTypes;
end

function dataConfig.parseFieldDesc(fields)
	-- do nothing
end

function dataConfig.parseTypeValue(dataType, dataValue)

	local value = nil;

	if dataType == "int" then

		value = tonumber(dataValue);

	elseif dataType == "float" then
		
		value = tonumber(dataValue);

	elseif dataType == "string" then
	
		value = tostring(dataValue);

	else

		print("invalid type value!! "..dataType);

	end

	return value;
end

function dataConfig.parseStructValue(dataType, dataName, dataValue)

	local structTable = {};

	local fs = string.split(dataValue, "|");

	for i,v in ipairs(fs) do
		
		structTable[dataName[i]] = dataConfig.parseTypeValue(dataType[i], v);
		
	end

	return structTable;
end

function dataConfig.parseField(field, fieldName, fieldType, config)
	
	if field == nil or field == "" then
		
		if fieldType.isStruct then

			config[fieldName.structName] = nil;

		else

			config[fieldName] = nil;
		end


		return nil;
	end

	if fieldType.isArray then
	
		if fieldType.isStruct then

			--print(field);

			config[fieldName.structName] = {};


			for w in string.gmatch(field, "%[.-%]") do

				local data = string.sub(w, 2, -2);
				local structValue = dataConfig.parseStructValue(fieldType.dataType, fieldName.structFieldNames, data);
				table.insert(config[fieldName.structName], structValue);
    		end

    		return config[fieldName.structName];
		else
			
			local fs = string.split(field, "|");

			config[fieldName] = {};

			for i,v in ipairs(fs) do
				
				config[fieldName][i] = dataConfig.parseTypeValue(fieldType.dataType, v);

			end

			return config[fieldName];
		end

	else
	
		if fieldType.isStruct then
			
			local dataValue = string.sub(field, 2, -2);
			config[fieldName.structName] = dataConfig.parseStructValue(fieldType.dataType, fieldName.structFieldNames, dataValue);

			return config[fieldName.structName];
		else

			config[fieldName] = dataConfig.parseTypeValue(fieldType.dataType, field);

			return config[fieldName];
		end

	end
end

function dataConfig.parseFields(fields, fieldNames, fieldTypes)
	
	local config = {};
	
	local key = "";

	for i, field in ipairs(fields) do
			
		local fieldValue = dataConfig.parseField(field, fieldNames[i], fieldTypes[i], config);

		if fieldTypes[i].key == true then
		
			if key == "" then
				key = fieldValue;
			else
				key = key .."^"..fieldValue;
			end
		end

	end

	return key, config;
end

function dataConfig.parseKeys(fields, fieldTypes)
	
	for i,v in ipairs(fields) do
		
		if v == "key" then
			fieldTypes[i].key = true;
		else
			fieldTypes[i].key = false;
		end

	end
end

function dataConfig.gdsInitCallback(name, data)

	dataConfig.currentParseName = name;

	local lines = string.split(data, "\n");

	local fieldNames = {};
	local fieldTypes = {};
	local fieldDesc = {};

	fieldTypes = dataConfig.parseFieldTypes(parseCSVLine(lines[2]));
	fieldNames = dataConfig.parseFieldNames(parseCSVLine(lines[1]), fieldTypes);
	-- 注释不用解析

	fieldDesc = dataConfig.parseFieldDesc(parseCSVLine(lines[3]));
	dataConfig.parseKeys(parseCSVLine(lines[4]), fieldTypes);

	local config = {};

	
	for i=6, #lines do
		
		local line = lines[i];

		if line ~= "" and line ~= nil then

			local fields = parseCSVLine(line);

			-- handle data line
			local key, oneLineConfig = dataConfig.parseFields(fields, fieldNames, fieldTypes);

			if key ~= nil then

				config[key] = oneLineConfig;

			end

		end

	end

	--dump(config);

	dataConfig.configs[name] = config;

	--dump(dataConfig.getInstance("equipment_evlove", 3, 5, 1));

	dataConfig.currentParseName = "";
end