local findBattleLayout = class("findBattleLayout", layout)

-- 一些定义
event_define.FindBattleLayout_SHOW = "FindBattleLayout_SHOW"
event_define.FindBattleLayout_CLOSE = "FindBattleLayout_CLOSE"

function findBattleLayout:ctor( id )
	findBattleLayout.super.ctor(self,id)	

	self:addEvent({ name = event_define.FindBattleLayout_SHOW, eventHandler = findBattleLayout.super.Show})
	self:addEvent({ name = event_define.FindBattleLayout_CLOSE, eventHandler = findBattleLayout.super.Close})
end	

function findBattleLayout:OnInit(event)
    self.wait_time_ = 0

     -- 获得UI对象
    local btn_cancle = self:ChildGameObject("Content/TopFrame/BtnCancle") -- 取消按钮
    self.lbl_wait_time_ = self:ChildGameObject("Content/TopFrame/WaitTime"):GetComponent(UILabel) -- 时间提示
    -- 绑定事件
    UIEventListener.Get(btn_cancle).onClick = function()
        findBattleDataManager:Instance():CancleFindBattle(function () self:Close() end)
    end

    self.update_wait_time_timerid_ = timerManager:Instance():RepeatCallFunc(self, self.UpdateWatiTime, 1)
end

function findBattleLayout:OnShow(event)
end

function findBattleLayout:OnHide(event)
end

function findBattleLayout:OnDestory( )
    timerManager:Instance():DestoryTimer(self.update_wait_time_timerid_)
	self.update_wait_time_timerid_ = -1 
end

function findBattleLayout:UpdateWatiTime( )
    self.wait_time_ = self.wait_time_ + 1
    self.lbl_wait_time_.text = "已用时间:" .. utilsFunc.formatH2M2S2Trim(self.wait_time_, -1)
end 

return findBattleLayout